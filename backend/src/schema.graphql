# import * from './generated/prisma.graphql'

type Message {
  message: String!
}

type Mutation {
  addFood(
    brand: String!
    calories: Int!
    carb: Float!
    ean: String
    fat: Float!
    fatMonounsaturated: Float
    fatPolyunsaturated: Float
    fatSaturated: Float
    fatTrans: Float
    fibre: Float
    name: String!
    polyol: Float
    protein: Float!
    servingSize: Int!
    servingUnit: Unit!
    sugar: Float
  ): Food!
  addWeight(date: DateTime, image: String, weight: Float!): WeightLog!
  requestReset(email: String!): Message!
  resetPassword(password: String!, token: String!): User!
  signIn(email: String!, password: String!): User!
  signOut: Message!
  signUp(email: String!, password: String!): User!
  updateEmail(email: String!): Message!
  updateFood(
    id: ID!
    brand: String
    calories: Int
    carb: Float
    ean: String
    fat: Float
    fatMonounsaturated: Float
    fatPolyunsaturated: Float
    fatSaturated: Float
    fatTrans: Float
    fibre: Float
    name: String
    polyol: Float
    protein: Float
    servingSize: Int
    servingUnit: Unit
    sugar: Float
  ): Food!
  updateWeight(
    id: ID!
    date: DateTime
    image: String
    weight: Float
  ): WeightLog!
  upsertProfile(
    dateOfBirth: DateTime
    gender: Gender
    height: Int
    location: String
    name: String
    photo: String
    timezone: String
  ): Profile!
  validateEmail(token: String!): User!
  verifyFood(id: ID!): Food!
}

type Query {
  foods(
    first: Int
    orderBy: FoodOrderByInput
    skip: Int
    where: FoodWhereInput
  ): [Food!]!
  listUsers: [User]!
  me: User
  myFoods(
    filter: String
    first: Int
    orderBy: FoodOrderByInput
    skip: Int
  ): [Food!]!
  user(id: ID!): User
}

type User {
  id: ID!
  email: String!
  foods: [Food!]!
  logs: [Log]!
  permissions: [Permission]!
  profile: Profile
}

type WeightLog {
  id: ID!
  date: DateTime!
  image: String
  weight: Float!
}
